#!/usr/bin/env bash

GH_REPO="airbox-build/agent"
TIMEOUT=90
LOG_PATH="/var/log/airbox"
INTERVAL=60
BINARY_PATH="/usr/local/bin"
SERVICE_NAME="airbox-agent"
BINARY_DIRECTORY=""

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --logpath)
      LOG_PATH="$2"
      shift 2
      ;;
    --interval)
      INTERVAL="$2"
      shift 2
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Detect the OS and architecture
OS=$(uname -s | tr '[:upper:]' '[:lower:]')
ARCH=$(uname -m)

case "$ARCH" in
  x86_64 | amd64) ARCH="amd64" ;;
  i?86 | x86) ARCH="386" ;;
  aarch64 | arm64) ARCH="arm64" ;;
  *) echo "Unsupported architecture: ${ARCH}"; exit 2 ;;
esac

case "$OS" in
  linux) BINARY_DIRECTORY="/opt/airbox" ;;
  darwin) BINARY_DIRECTORY="/usr/local/airbox" ;;
  *) echo "Unsupported OS: ${OS}"; exit 1 ;;
esac

mkdir -p "${BINARY_DIRECTORY}" || exit 2
mkdir -p "${LOG_PATH}" || exit 2

# Detect if running inside a container
is_container() {
  if [ -f /.dockerenv ] || [ -f /run/.containerenv ]; then
    return 0
  elif grep -q -i "container" /proc/1/cgroup 2>/dev/null; then
    return 0
  else
    return 1
  fi
}

# Fetch the latest version of the agent
VERSION=$(curl --silent --location --max-time "${TIMEOUT}" \
  "https://api.github.com/repos/${GH_REPO}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
if [ -z "$VERSION" ]; then
  echo "Error fetching the latest version. Please try again later."
  exit 1
fi

# Download the agent binary
GH_REPO_BIN="agent-${VERSION}-${OS}-${ARCH}.tar.gz"
TMP_DIR=$(mktemp -d 2>/dev/null || mktemp -d -t 'airbox-install.XXXXXXXXXX')
echo "Using temporary directory: ${TMP_DIR}"
cd "$TMP_DIR"

echo "Downloading AirBox Agent $VERSION..."
curl --silent --location --max-time "${TIMEOUT}" \
  "https://github.com/${GH_REPO}/releases/download/${VERSION}/${GH_REPO_BIN}" | tar zxf - || {
    echo "Error downloading binary."
    exit 2
}

# Install the agent binary
mv agent "${BINARY_PATH}/${SERVICE_NAME}" || exit 2
chmod 755 "${BINARY_PATH}/${SERVICE_NAME}"

# Verify the installation
if [ ! -f "${BINARY_PATH}/${SERVICE_NAME}" ]; then
  echo "Installation unsuccessful: AirBox Agent not found."
  exit 2
fi

rm -rf "$TMP_DIR"
echo "Installed successfully to ${BINARY_PATH}/${SERVICE_NAME}."

# Function to create Supervisor config
create_supervisor_config() {
  echo "Setting up Supervisor..."
  sudo tee /etc/supervisor/conf.d/${SERVICE_NAME}.conf >/dev/null <<EOF
[program:${SERVICE_NAME}]
command=${BINARY_PATH}/${SERVICE_NAME} --logpath=${LOG_PATH} --interval=${INTERVAL}
autostart=true
autorestart=true
stderr_logfile=/var/log/${SERVICE_NAME}.err.log
stdout_logfile=/var/log/${SERVICE_NAME}.out.log
EOF
  sudo supervisorctl reread
  sudo supervisorctl update
  sudo supervisorctl start ${SERVICE_NAME}
}

# Function to create systemd service
create_systemd_service() {
  echo "Setting up systemd service..."
  sudo tee /etc/systemd/system/${SERVICE_NAME}.service >/dev/null <<EOF
[Unit]
Description=AirBox Agent Service
After=network.target

[Service]
ExecStart=${BINARY_PATH}/${SERVICE_NAME} --logpath=${LOG_PATH} --interval=${INTERVAL}
WorkingDirectory=${BINARY_DIRECTORY}
Restart=always
User=${USER}

[Install]
WantedBy=multi-user.target
EOF
  sudo systemctl enable ${SERVICE_NAME}.service
  sudo systemctl start ${SERVICE_NAME}.service
}

# Function to create macOS launchd plist
create_launchd_service() {
  echo "Setting up macOS launchd service..."
  PLIST_PATH="/Library/LaunchDaemons/com.airbox.agent.plist"
  sudo tee "$PLIST_PATH" >/dev/null <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>com.airbox.agent</string>
  <key>ProgramArguments</key>
  <array>
    <string>${BINARY_PATH}/${SERVICE_NAME}</string>
    <string>--logpath=${LOG_PATH}</string>
    <string>--interval=${INTERVAL}</string>
  </array>
  <key>WorkingDirectory</key>
  <string>${BINARY_DIRECTORY}</string>
  <key>KeepAlive</key>
  <true/>
  <key>RunAtLoad</key>
  <true/>
</dict>
</plist>
EOF
  sudo launchctl load "$PLIST_PATH"
}

# Install the service based on the environment
if is_container; then
  echo "Running inside a container. Using Supervisor or manual execution."
  if command -v supervisorctl >/dev/null 2>&1; then
    create_supervisor_config
  else
    echo "Supervisor not available. Running manually in the background."
    nohup "${BINARY_PATH}/${SERVICE_NAME}" --logpath="${LOG_PATH}" --interval="${INTERVAL}" &
  fi
elif [ "$OS" == "linux" ]; then
  if command -v systemctl >/dev/null 2>&1; then
    create_systemd_service
  else
    create_supervisor_config
  fi
elif [ "$OS" == "darwin" ]; then
  create_launchd_service
else
  echo "Unsupported environment. Run manually:"
  "${BINARY_PATH}/${SERVICE_NAME}" --logpath="${LOG_PATH}" --interval="${INTERVAL}" &
fi

echo "AirBox Agent service setup complete."
